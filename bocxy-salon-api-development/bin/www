#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("node-rest:server");
const http = require("http");
// const fs = require('fs');
// const https = require('https');

// SSL certificate for HTTPS

// const options = process.env.NODE_ENV && process.env.NODE_ENV === "production" ? {
//   key: fs.readFileSync('/etc/letsencrypt/live/rungila.com/privkey.pem', 'utf8'),
//   cert: fs.readFileSync('/etc/letsencrypt/live/rungila.com/cert.pem', 'utf8'),
//   ca: fs.readFileSync('/etc/letsencrypt/live/rungila.com/chain.pem', 'utf8')
// } : {};

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "50080");
app.set("port", port);

/**
 * Create HTTP server.
 */

// const server = process.env.NODE_ENV && process.env.NODE_ENV === "production" ? https.createServer(options, app) : http.createServer(app);
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
